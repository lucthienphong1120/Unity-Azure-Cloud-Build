name: Actions ðŸ˜Ž
on:
  workflow_dispatch: {}
  pull_request: {}
  push:
    branches: [main]
env:
  UNITY_LICENSE: "your-unity-license"
  WEB_APP_NAME: <your-web-app-name>
  IMAGE_NAME: <your-container-image-name>
  REGISTRY_LOGIN_SERVER: <your-container-registry-login-server>
  REGISTRY_USERNAME: <your-container-registry-username>
  REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
  RESOURCE_GROUP_NAME: <your-resource-group-name>
jobs:
  prebuild:
    name: Prebuild
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
      lfs: true
    - name: Install LFS
      run: git lfs install
  build-and-deploy:
    needs: ['prebuild']
    name: Build Workflow âœ¨
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        lfs: true
    - name: Create LFS file list
      run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
    - name: Restore LFS cache
      uses: actions/cache@v2
      id: lfs-cache
      with:
        path: .git/lfs
        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
    - name: Git LFS Pull
      run: |
        git lfs pull
        git add .
        git reset --hard
    - name: Restore Library cache
      uses: actions/cache@v2
      with:
        path: /Library
        key: Library-test-project-WebGL
    # Test
    # - name: Run tests
    #   uses: game-ci/unity-test-runner@v2
    #   with:
    #     projectPath: .
    # Build
    - name: Build project
      uses: game-ci/unity-builder@v2
      with:
        projectPath: .
        targetPlatform: WebGL
        versioning: Semantic
    # Output
    - uses: actions/upload-artifact@v2
      with:
        name: Build
        path: build
    # Build Docker
    - name: Login to the Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_LOGIN_SERVER }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    # Deploy container from registry to azure web app
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.WEB_APP_NAME }}
        images: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        resource-group-name: ${{ env.RESOURCE_GROUP_NAME }}
    # Output
    - uses: actions/upload-artifact@v2
      with:
        name: Build
        path: build
  # Below is a test of most combinations, for testing integrity.
  requestManualActivationFile:
    name: Request manual activation file ðŸ”‘
    runs-on: ubuntu-20.04
    steps:
      # Checkout repository
      - uses: actions/checkout@v2
      # Request manual activation file
      - uses: game-ci/unity-request-activation-file@v2
        id: getManualLicenseFile
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - uses: actions/upload-artifact@v2
        with:
          name: Manual Activation File
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}
  cleanUp:
    name: Clean up
    runs-on: ubuntu-20.04
    needs: ['build-and-deploy']
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Clean up
      run: git lfs uninstall
  # requestActivation:
  #   name: Request activation âœ”
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: game-ci/unity-activate@v2
  # activateAndThenReturnLicense:
  #   name: returnLicense ðŸŽˆ
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: game-ci/unity-activate@v2
  #   - uses: game-ci/unity-return-license@v2
